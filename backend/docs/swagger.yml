openapi: 3.0.0
info:
  title: es-writer API
  version: 1.0.0
paths:
  /auth/signup:
    post:
      summary: User signup
      tags:
        - auth
      description: Password must contain at least 8 characters, 1 uppercase letter, 1 lowercase letter, 1 number and 1 special character
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: test
                password:
                  type: string
                  example: aA1!abcd
                email:
                  type: string
                  example: test@example.com
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          headers:
            Set-Cookie:
              description: Set username
              schema:
                type: string
        '400':
          description: Invalid request payload
          content:
            text/plain:
              schema:
                type: string
                example: error message
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: error message

  
  /auth/login:
    post:
      summary: User login
      tags:
        - auth
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: test
                password:
                  type: string
                  example: aA1!abcd
      responses:
        '200':
          description: User signed in
          headers:
            Set-Cookie:
              description: Set cookies for idToken, accessToken and refreshToken
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  username:
                    type: string
                    example: test
                  password:
                    type: string
                    example: aA1!abcd
        '400':
          description: Invalid request payload
          content:
            text/plain:
              schema:
                type: string
                example: error message
        '403':
          description: Invalid username or password
          content:
            text/plain:
              schema:
                type: string
                example: error message
  /auth/checkEmail:
    post:
      summary: Check if email address is valid
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/username'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                verificationCode:
                  type: string
      responses:
        '200':
          description: Email verified
          content:
            boolean:
              schema:
                type: boolean
                example: true
        '400':
          description: Invalid request payload or Missing required fields
          content:
            text/plain:
              schema:
                type: string
                example: error message
        '401':
          description: Couldn't get username from cookie
          content:
            text/plain:
              schema:
                type: string
                example: error message
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: error message
  
  /auth/resendEmail:
    post:
      summary: Resend email verification code
      tags:
        - auth
      parameters:
        - $ref: '#/components/parameters/username'
      responses:
        '200':
          description: Email verification code resent
          content:
            boolean:
              schema:
                type: boolean
                example: true
        '400':
          description: Invalid request payload or Missing required fields
          content:
            text/plain:
              schema:
                type: string
                example: error message
        '401':
          description: Couldn't get username from cookie
          content:
            text/plain:
              schema:
                type: string
                example: error message
        '500':
          description: Internal server error
          content:
            text/plain:
              schema:
                type: string
                example: error message
    
  /app/profile/getProfile:
    get:
      summary: Get user profile
      tags:
        - app
      responses:
        '201':
          description: Profile retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
        - idToken: []
        - accessToken: []
        - refreshToken: []

  /app/profile/updateProfile:
    patch:
      summary: update user profile
      tags:
        - app
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                bio:
                  type: string
                experience:
                  type: string
                projects:
                  type: string
      responses:
        '201':
          description: Profile saved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request payload
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      security:
        - idToken: []
        - accessToken: []
        - refreshToken: []
  
  /app/generate/getAnswers:
    post:
      summary: Get answers from HTML content
      tags:
        - app
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                html:
                  type: string
      responses:
        '201':
          description: Answers retrieved
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Answers'
        '401':
          description: Unauthorized
        '400':
          description: Invalid request payload
        '500':
          description: Internal server error
      security:
        - idToken: []
        - accessToken: []
        - refreshToken: []

components:
  securitySchemes:
    idToken:
      type: apiKey
      in: cookie
      name: idToken
    accessToken:
      type: apiKey
      in: cookie
      name: accessToken
    refreshToken:
      type: apiKey
      in: cookie
      name: refreshToken
  parameters:
    username:
      name: username
      in: cookie
      required: true
      schema:
        type: string
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          example: 00000000-0000-0000-0000-000000000000
        username:
          type: string
          example: test
        email:
          type: string
          example: test@example.com
        bio:
          type: string
          example: ""
        experience:
          type: string
          example: ""
        projects:
          type: string
          example: ""
        created_at:
          type: string
          example: "2024-07-01T00:00:00.000000000Z"
        updated_at:
          type: string
          example: "2024-07-01T00:00:00.000000000Z"
    Answers:
      type: object
      properties:
        answers:
          type: array
          items:
            type: object
            properties:
              question:
                type: string
              answer:
                type: string
